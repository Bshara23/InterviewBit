
class ListNode:
    def __init__(self, x):
        self.val = x
        self.next = None


def addTwoNumbers(l1, l2, c=0):

    # start with main calculations for smallest sub-problem
    val = l1.val + l2.val + c
    c = val // 10
    ret = ListNode(val % 10)

    # condition for recursion assuming that lists are of the same size
    if (l1.next != None or l2.next != None or c != 0):
        # if lists are not of the same size then fix them
        if l1.next == None:
            l1.next = ListNode(0)
        if l2.next == None:
            l2.next = ListNode(0)
        # recursion
        ret.next = addTwoNumbers(l1.next, l2.next, c)
    return ret


"""
What I learned:
    1. when having nodes/lists ALWAYS try to think of a way to use recursion
    2. Solve problems in recursively, e.g. for the above question, start with 
    a simpler problem, assume that the carry and the lists always exists (not Null)
    and after solving this problem, add the conditions one by one, meaning expand the
    problem recursively, like dynamic-programming in a way.

"""

# example execution
# 342 + 465 = 807

list1 = ListNode(2)
list1.next = ListNode(4)
list1.next.next = ListNode(3)


list2 = ListNode(5)
list2.next = ListNode(6)
list2.next.next = ListNode(4)

result = addTwoNumbers(list1, list2)

print(result.val)
print(result.next.val)
print(result.next.next.val)

